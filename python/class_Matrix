import copy
class Matrix:
    def __init__(self, body):
        self.body = body
        
    def nrow(self):
        return len(self.body)

    def ncol(self):
        return len(self.body[0])

    def __str__(self):
        for i in range(self.nrow()):
            s = [g for g in self.body[i]]
            for j in range(len(s)):
                print('[{}] '.format(s[j]), end="")
            print('\n', end="")
        return ''
    
    def __add__(self1, self2):
        if (self1.ncol() == self2.ncol()) and (self1.nrow() == self2.nrow()):
            a1 = []
            for i in range(self1.nrow()):
                s1 = [g1 for g1 in self1.body[i]]
                s2 = [g2 for g2 in self2.body[i]]
                b1 = []
                for j in range(len(s1)):
                    b1.append(s1[j] + s2[j])
                a1.append(b1)
            m_res = Matrix(a1)
            return m_res
        else: 
            return 'None'
        
    def __sub__(self1, self2):
        if (self1.ncol() == self2.ncol()) and (self1.nrow() == self2.nrow()):
            a1 = []
            for i in range(self1.nrow()):
                s1 = [g1 for g1 in self1.body[i]]
                s2 = [g2 for g2 in self2.body[i]]
                b1 = []
                for j in range(len(s1)):
                    b1.append(s1[j] - s2[j])
                a1.append(b1)
            m_res = Matrix(a1)
            return m_res
        else: 
            return 'None'        
        
    def __mul__(self1, self2):
        if (type(self2) == float) or (type(self2) == int):
            a1 = []
            for i in range(self1.nrow()):
                s = [g for g in self1.body[i]]
                b1 = []
                for j in range(len(s)):
                    b1.append(s[j]*self2)
                a1.append(b1)
            m_res = Matrix(a1)
            return m_res
        elif type(self2) == Matrix:
            if self1.ncol() == self2.nrow():
                a1 = []
                for i in range(self1.nrow()):
                    b = []
                    for g in range(self2.ncol()):
                        s = 0
                        for j in range(self1.ncol()):
                            s = s + self1.body[i][j] * self2.body[j][g]
                        b.append(s)
                    a1.append(b)
                m_res = Matrix(a1)
                return m_res
            else:
                return 'None1'
        else:
            return 'None2'


    def mul_line(self, i, k, inplace=False):
            a1 = []
            for g in range(self.nrow()):
                b1 = []
                for h in range(self.ncol()):
                    if g == i:
                        b1.append(self.body[g][h]*k)
                    else:
                        b1.append(self.body[g][h])
                a1.append(b1)
            m_res = Matrix(a1)
            return m_res 
            
            
    def mul_col(self, j, k, inplace=False):
            a1 = []
            for g in range(self.nrow()):
                b1 = []
                for h in range(self.ncol()):
                    if h == j:
                        b1.append(self.body[g][h]*k)
                    else:
                        b1.append(self.body[g][h])
                a1.append(b1)
            m_res = Matrix(a1)
            return m_res
            
            
    def transpon(self, inplace=False):
            a1 = []
            for i in range(self.ncol()):
                b1 = []
                for j in range(self.nrow()):
                    b1.append(self.body[j][i])
                a1.append(b1)
            m_res = Matrix(a1)
            return m_res
            
            
    def trace(self):
        if self.nrow() == self.ncol():
            res = 0
            j = 0
            for i in range(self.ncol()):
                res += self.body[i][j]
                j += 1
            return res
        else:
            return 'Error!'

    
    def up_trig_mat(self, inplace = False):
        if (self.ncol() == self.nrow()):
            a1 = []
            for g in range(self.nrow()):
                b1 = []
                for h in range(self.ncol()):
                    if g - h >= 1:
                        b1.append(0)
                    else:
                        b1.append(self.body[g][h])
                a1.append(b1)
            m_res = Matrix(a1)
            return m_res 
    
    
    def addmul_line(self, i, j, k, inplace=False):
        a1 = []
        for g in range(self.nrow()):
            b1 = []
            for h in range(self.ncol()):
                if g == i:
                    b1.append(self.body[i][h] + (self.body[j][h] * k))
                else:
                    b1.append(self.body[g][h])
            a1.append(b1)
        m_res = Matrix(a1)
        return m_res

        
    def addmul_col(self, i, j, k, inplace=False):
        a1 = []
        for g in range(self.nrow()):
            b1 = []
            for h in range(self.ncol()):
                if h == i:
                    b1.append(self.body[g][i] + (self.body[g][j] * k))
                else:
                    b1.append(self.body[g][h])
            a1.append(b1)
        m_res = Matrix(a1)
        return m_res
        
        
    def exchange_l(self, i, j, inplace=False):
        a1 = []
        for g in range(self.nrow()):
            b1 = []
            for h in range(self.ncol()):
                if g == i:
                    b1.append(self.body[j][h])
                elif g == j:
                    b1.append(self.body[i][h])
                else:
                    b1.append(self.body[g][h])
            a1.append(b1)
        m_res = Matrix(a1)
        return m_res
      
    
    def exchange_c(self, i, j, inplace=False):
        a1 = []
        for g in range(self.nrow()):
            b1 = []
            for h in range(self.ncol()):
                if h == i:
                    b1.append(self.body[g][j])
                elif h == j:
                    b1.append(self.body[g][i])
                else:
                    b1.append(self.body[g][h])
            a1.append(b1)
        m_res = Matrix(a1)
        return m_res
    
    
    def det(self):
        res = 1
        v = 0
        W = copy.deepcopy(self)
        for k in range(W.ncol()):
            maxx = k
            for i in range(k, W.nrow()):
                if W.body[maxx][k] < W.body[i][k]:
                    maxx = i
            W.exchange_l(maxx, k, True)
            v += 1
            for i in range(k+1, W.nrow()):
                t = copy.deepcopy(W.body[k][k])
                t = (W.body[i][k] / t) * (-1)
                W.addmul_line(i, k, t, True)
            res *= W.body[k][k]
        return res * ((-1) ** v)

    
    def inverse(self):
        if self.det() == 0:
            return "Error!"
        else:
            a1 = []
            for i in range(self.nrow()):
                b1 = []
                for j in range(self.ncol()):
                    if i == j:
                        b1.append(1)
                    else:
                        b1.append(0)
                a1.append(b1)
            I = Matrix(a1)
            return SLAY(self, I)
            

def SLAY(A, c):
    S = copy.deepcopy(A)
    b = copy.deepcopy(c)
    for k in range(S.ncol()-1):
        maxx = k
        for i in range(k, S.nrow()):
            if S.body[maxx][k] < S.body[i][k]:
                maxx = i
        S.exchange_l(maxx, k, True)
        b.exchange_l(maxx, k, True)
        for i in range(k+1, S.nrow()):
            t = copy.deepcopy(S.body[k][k])
            t = (S.body[i][k] / t) * (-1)
            S.addmul_line(i, k, t, True)
            b.addmul_line(i, k, t, True)
            if S.body[k][k] != 1:
                t = 1 / S.body[k][k]
                S.mul_line(k, t, True)
                b.mul_line(k, t, True)

    for k in reversed(range(S.ncol())):
        maxx = k
        '''for i in reversed(range(k)):
            if S.body[maxx][k] < S.body[i][k]:
                maxx = i
        S.exchange_l(maxx, k, True)
        b.exchange_l(maxx, k,  True)'''
        for i in reversed(range(k)):
            t = copy.deepcopy(S.body[k][k])
            t = (S.body[i][k] / t) * (-1)
            S.addmul_line(i, k, t, True)
            b.addmul_line(i, k, t, True)
            if S.body[k][k] != 1:
                t = 1 / S.body[k][k]
                S.mul_line(k, t, True)
                b.mul_line(k, t, True)
    return b

            
a = [[1, 1, 1], [2, 1, 1], [1, 1, 4]]         
b = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
 
m1 = Matrix(a)
m2 = Matrix(b)
print(m1)
print(m2)
print(m1+m2)
print(m1-m2)
print(m1.mul_line(0, 100, False))
print(m1.mul_col(0, 100, False))
print(m1*m2)
print(m1.trace())
print(m2.transpon())
print(m2.up_trig_mat())
print(m2.det())
print(m2.inverse())
print(SLAY(m2, m1))
